From 435cc603763e5ff7404ef65af5362d9a0e661596 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Wed, 8 Apr 2020 11:33:25 +0200
Subject: [PATCH 1/3] feat(vhd/canonpath): add support for DRBD resource path

Preserve symlinks when "/dev/drbd/by-res/<RES_NAME>/<VOLUME>" paths are used.
It's interesting when a parent is set to a VHD file to avoid usage of
"/dev/drbdXXXX" paths where XXXX is the device minor number.

We can have:
> vhd-util query -n /dev/drbd/by-res/volume-d803817e-6113-4b89-abdf-d4ab39d63e8c/0 -p
/dev/drbd/by-res/volume-d5f5a079-0529-4b97-95be-9a859056d523/0

instead of:
> vhd-util query -n /dev/drbd/by-res/volume-d803817e-6113-4b89-abdf-d4ab39d63e8c/0 -p
/dev/drbd/./drbd1004

If a DRBD resource exists on many hosts with a resource name equal to an UUID, it can be used
independently of the DRBD device minor number on each host.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 vhd/lib/canonpath.c | 148 +++++++++++++++++++++++++++++++++-----------
 1 file changed, 113 insertions(+), 35 deletions(-)

diff --git a/vhd/lib/canonpath.c b/vhd/lib/canonpath.c
index a60032b..e5f368e 100644
--- a/vhd/lib/canonpath.c
+++ b/vhd/lib/canonpath.c
@@ -32,6 +32,10 @@
 #include "config.h"
 #endif
 
+#ifndef _GNU_SOURCE
+	#define _GNU_SOURCE
+#endif
+
 #include <stdio.h>
 #include <errno.h>
 #include <stdlib.h>
@@ -41,68 +45,142 @@
 
 #include "canonpath.h"
 
+char *
+normalize_path(const char *path, size_t path_len, char *normalized_path)
+{
+	size_t res_len = 0;
+
+	const char *ptr = path;
+	const char *end = path + path_len;
+	const char *next;
+
+	if (!path_len || *path != '/') {
+		// Relative path.
+		if (!getcwd(normalized_path, PATH_MAX))
+			return NULL;
+
+		res_len = strlen(normalized_path);
+	}
+
+	for (ptr = path; ptr < end; ptr = next + 1) {
+		size_t len;
+		if (!(next = memchr(ptr, '/', end - ptr)))
+			next = end;
+		len = next - ptr;
+		switch (len) {
+			case 2:
+				if (ptr[0] == '.' && ptr[1] == '.') {
+					const char *slash = memrchr(normalized_path, '/', res_len);
+					if (slash)
+						res_len = slash - normalized_path;
+					continue;
+				}
+				break;
+			case 1:
+				if (ptr[0] == '.')
+					continue;
+				break;
+			case 0:
+				continue;
+		}
+		normalized_path[res_len++] = '/';
+		memcpy(normalized_path + res_len, ptr, len);
+		res_len += len;
+	}
+
+	if (res_len == 0)
+		normalized_path[res_len++] = '/';
+	normalized_path[res_len] = '\0';
+	return normalized_path;
+}
+
 /*
  * Return a path name which should be used resolving parent.
  * This could be different from realpath as realpath follows all symlinks.
  * Function try to get a file name (even if symlink) contained in /dev/mapper.
+ * Symlinks are also kept if a /dev/drbd/by-res/<UUID>/<VOLUME_ID> is used.
  */
 char *
 canonpath(const char *path, char *resolved_path)
 {
+	static const char dev_path[] = "/dev/";
+	static const size_t dev_len = sizeof(dev_path) - 1;
+
+	static const char dev_mapper_path[] = "/dev/mapper/";
+	static const size_t dev_mapper_len = sizeof(dev_mapper_path) - 1;
+
+	static const char dev_drbd_res_path[] = "/dev/drbd/by-res/";
+	static const size_t dev_drbd_res_len = sizeof(dev_drbd_res_path) - 1;
+
+	static const char dev_drbd_prefix[] = "/dev/drbd";
+	static const size_t dev_drbd_prefix_len = sizeof(dev_drbd_prefix) - 1;
+
 	/* make some cleanup */
 	char canon[PATH_MAX], *p, *dst;
 	size_t len = strlen(path);
 
 	if (len >= PATH_MAX)
 		goto fallback;
-	memcpy(canon, path, len+1);
 
-	/* "//" -> "/" */
-	while ((p = strstr(canon, "//")) != NULL)
-		memmove(p, p+1, strlen(p+1)+1);
-
-	/* "/./" -> "/" */
-	while ((p = strstr(canon, "/./")) != NULL)
-		memmove(p, p+2, strlen(p+2)+1);
+	if (!normalize_path(path, len, canon))
+		return NULL;
 
 	/*
-	 * if path points to a file in /dev/mapper (with no subdirectories)
-	 * return it without following symlinks
+	 * If path points to a file in /dev/mapper (with no subdirectories)
+	 * return it without following symlinks.
 	 */
-	if (strncmp(canon, "/dev/mapper/", 12) == 0 &&
-	    strchr(canon+12, '/') == NULL &&
+	if (strncmp(canon, dev_mapper_path, dev_mapper_len) == 0 &&
+	    strchr(canon + dev_mapper_len, '/') == NULL &&
 	    access(canon, F_OK) == 0) {
 		strcpy(resolved_path, canon);
 		return resolved_path;
 	}
 
 	/*
-	 * if path is in a subdirectory of dev (possibly a logical volume)
+	 * If path is in a subdirectory of dev (possibly a logical volume)
 	 * try to find a corresponding file in /dev/mapper and return
-	 * if found
+	 * if found. The path can also be a DRBD volume, try to find it in
+	 * /dev/drbd/by-res/.
 	 */
-	if (strncmp(canon, "/dev/", 5) == 0 &&
-	    (p = strchr(canon+5, '/')) != NULL &&
-	    strchr(p+1, '/') == NULL) {
-
-		strcpy(resolved_path, "/dev/mapper/");
-		dst = strchr(resolved_path, 0);
-		for (p = canon+5; *p; ++p) {
-			if (dst - resolved_path >= PATH_MAX - 2)
-				goto fallback;
-			switch (*p) {
-			case '/':
-				*dst = '-';
-				break;
-			case '-':
-				*dst++ = '-';
-				/* fall through */
-			default:
-				*dst = *p;
+	if (strncmp(canon, dev_path, dev_len) == 0 && (p = strchr(canon + dev_len, '/')) != NULL) {
+		if (strchr(p+1, '/') == NULL) {
+			strcpy(resolved_path, dev_mapper_path);
+			dst = strchr(resolved_path, 0);
+			for (p = canon + dev_len; *p; ++p) {
+				if (dst - resolved_path >= PATH_MAX - 2)
+					goto fallback;
+				switch (*p) {
+				case '/':
+					*dst = '-';
+					break;
+				case '-':
+					*dst++ = '-';
+					/* fall through */
+				default:
+					*dst = *p;
+				}
+				++dst;
 			}
-			++dst;
-		}
-		*dst = 0;
+			*dst = 0;
+		} else if (strncmp(canon + dev_len, dev_drbd_res_path + dev_len, dev_drbd_res_len - dev_len) == 0) {
+			/* If the path is a real DRBD path, it's a symlink that points to /dev/drbdXXXX,
+			 * where XXXX are digits. */
+			if (!realpath(canon, resolved_path))
+				return NULL;
+
+			/* Try to match /dev/drbd. */
+			if (strncmp(resolved_path, dev_drbd_prefix, dev_drbd_prefix_len) != 0)
+				return resolved_path;
+
+			/* Check the digits. */
+			errno = 0;
+			strtol(resolved_path + dev_drbd_prefix_len, &p, 10);
+			if (p == resolved_path + dev_drbd_prefix_len || errno == ERANGE || *p != '\0')
+				return resolved_path; /* Cannot parse correctly pattern. */
+
+			strcpy(resolved_path, canon);
+		} else
+			goto fallback;
 		if (access(resolved_path, F_OK) == 0)
 			return resolved_path;
 	}
-- 
2.25.1


From 117a408b88a085202afe5f9849389a0635eea977 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Wed, 17 Jun 2020 14:13:35 +0200
Subject: [PATCH 2/3] feat(libvhd): try to open DRBD devices using the LVM
 layer

If a VHD is open with the read only flag we must open it with the LVM slave device
directly. Why? Because an external program can lock the device and it becomes impossible
to access it.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 vhd/lib/libvhd.c | 105 ++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 104 insertions(+), 1 deletion(-)

diff --git a/vhd/lib/libvhd.c b/vhd/lib/libvhd.c
index 0caef99..14411ea 100644
--- a/vhd/lib/libvhd.c
+++ b/vhd/lib/libvhd.c
@@ -35,6 +35,7 @@
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
 #endif
+#include <dirent.h>
 #include <stdio.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -119,6 +120,90 @@ old_clear_bit(volatile char *addr, int nr)
 	((uint32_t *)addr)[nr >> 5] &= ~(1 << (nr & 31));
 }
 
+static int
+makedev_from_file(const char *file, dev_t *dev) {
+	*dev = 0;
+
+	FILE *f = fopen(file, "r");
+	if (!f)
+		return -1;
+
+	unsigned int dev_major;
+	unsigned int dev_minor;
+	const int ret = fscanf(f, "%u:%u", &dev_major, &dev_minor);
+	fclose(f);
+
+	if (ret != 2)
+		return -1;
+
+	*dev = makedev(dev_major, dev_minor);
+	return 0;
+}
+
+static int
+drbd_to_mapper(const struct stat *stats, dev_t *dev) {
+	static const int drbd_major = 147;
+
+	*dev = 0;
+
+	/* Check if it's a DRBD device. */
+	if (!S_ISBLK(stats->st_mode))
+		return -1;
+
+	const unsigned int dev_major = major(stats->st_rdev);
+	if (dev_major != drbd_major)
+		return -1;
+
+	/* Ok we can try to search a valid slave device. */
+	/* Note: If it's a diskless DRBD device, there is no slave. */
+	const unsigned int dev_minor = minor(stats->st_rdev);
+	char slaves_dir[PATH_MAX];
+	snprintf(slaves_dir, sizeof slaves_dir, "/sys/dev/block/%u:%u/slaves", dev_major, dev_minor);
+
+	DIR *dir = opendir(slaves_dir);
+	if (!dir)
+		return -1;
+
+	struct dirent *ent;
+	while ((ent = readdir(dir))) {
+		/* Find a valid symlink to a slave. */
+		#ifdef _DIRENT_HAVE_D_TYPE
+			if (ent->d_type == DT_LNK) {
+				/* Ok here, we have a symlink! */
+			} else if (ent->d_type != DT_UNKNOWN)
+				continue;
+			else
+		#endif
+		{
+			 struct stat slave_stats;
+			 stat(ent->d_name, &slave_stats);
+			 if (!S_ISLNK(slave_stats.st_mode))
+				 continue;
+		}
+
+		/* Check if this entry is a valid device mapper. */
+		static const char dm_prefix[] = "dm-";
+		if (strncmp(dm_prefix, ent->d_name, sizeof dm_prefix - 1))
+			continue;
+
+		char *p;
+		char *dm_number = ent->d_name + sizeof dm_prefix - 1;
+		strtol(dm_number, &p, 10);
+		if (p == dm_number || errno == ERANGE || *p != '\0')
+			continue;
+
+		/* Use this device mapper. */
+		char dev_path[PATH_MAX];
+		snprintf(dev_path, sizeof dev_path, "/sys/block/%s/dev", ent->d_name);
+
+		closedir(dir);
+		return makedev_from_file(dev_path, dev);
+	}
+
+	closedir(dir);
+	return -1;
+}
+
 int
 open_optional_odirect(const char *pathname, int flags, ...)
 {
@@ -2598,6 +2683,24 @@ vhd_open(vhd_context_t *ctx, const char *file, int flags)
 	ctx->fd     = -1;
 	ctx->oflags = flags;
 
+	char bypass_file[PATH_MAX] = "";
+	if (flags & VHD_OPEN_RDONLY) {
+		struct stat stats;
+		err = stat(file, &stats);
+		if (err == -1)
+			return -errno;
+
+		/* If a DRBD path is used, we try to use the real physical device. */
+		/* Why? Because the device can be locked by any program. */
+		/* Note: We can't use the physical data if the DRBD is a diskless device... */
+		/* Logic but annoying. */
+		dev_t mapper_dev;
+		if (drbd_to_mapper(&stats, &mapper_dev) == 0) {
+			if (snprintf(bypass_file, sizeof bypass_file, "/dev/block/%u:%u", major(mapper_dev), minor(mapper_dev)) == -1)
+				return -errno;
+		}
+	}
+
 	err = namedup(&ctx->file, file);
 	if (err)
 		return err;
@@ -2619,7 +2722,7 @@ vhd_open(vhd_context_t *ctx, const char *file, int flags)
 	if (flags & VHD_OPEN_RDWR)
 		oflags |= O_RDWR;
 
-	ctx->fd = open_optional_odirect(ctx->file, oflags, 0644);
+	ctx->fd = open_optional_odirect(*bypass_file ? bypass_file : ctx->file, oflags, 0644);
 	if (ctx->fd == -1) {
 		err = -errno;
 		VHDLOG("failed to open %s: %d\n", ctx->file, err);
-- 
2.25.1


From 84455cc6fd0b49f9297305000932aef2ea150b7d Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Fri, 26 Jun 2020 17:54:29 +0200
Subject: [PATCH 3/3] feat(libvhd): when a DRBD device path is given, do not
 use LVM layer if device is not up to date

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 vhd/lib/libvhd.c | 54 +++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 46 insertions(+), 8 deletions(-)

diff --git a/vhd/lib/libvhd.c b/vhd/lib/libvhd.c
index 14411ea..5a2e09e 100644
--- a/vhd/lib/libvhd.c
+++ b/vhd/lib/libvhd.c
@@ -121,7 +121,8 @@ old_clear_bit(volatile char *addr, int nr)
 }
 
 static int
-makedev_from_file(const char *file, dev_t *dev) {
+makedev_from_file(const char *file, dev_t *dev)
+{
 	*dev = 0;
 
 	FILE *f = fopen(file, "r");
@@ -141,21 +142,58 @@ makedev_from_file(const char *file, dev_t *dev) {
 }
 
 static int
-drbd_to_mapper(const struct stat *stats, dev_t *dev) {
+is_drbd_device(const struct stat *stats)
+{
 	static const int drbd_major = 147;
 
-	*dev = 0;
-
-	/* Check if it's a DRBD device. */
 	if (!S_ISBLK(stats->st_mode))
-		return -1;
+		return 0;
 
 	const unsigned int dev_major = major(stats->st_rdev);
 	if (dev_major != drbd_major)
+		return 0;
+
+	return 1;
+}
+
+static int
+drbd_is_up_to_date(const struct stat *stats)
+{
+	static const char up_to_date_prefix[] = "UpToDate";
+
+	if (!is_drbd_device(stats))
+		return 0;
+
+	char cmd[64];
+	snprintf(cmd, sizeof cmd, "drbdsetup dstate %u 2> /dev/null", minor(stats->st_rdev));
+
+	int ok = 0;
+
+	FILE *stream = popen(cmd, "r");
+	char line[1024] = {0};
+	if (
+		stream && fscanf(stream, "%1023[^\n]", line) == 1 &&
+		!strncmp(line, up_to_date_prefix, sizeof up_to_date_prefix - 1)
+	)
+		ok = 1;
+
+	if (stream)
+		pclose(stream);
+
+	return ok;
+}
+
+static int
+drbd_to_mapper(const struct stat *stats, dev_t *dev)
+{
+	*dev = 0;
+
+	if (!is_drbd_device(stats))
 		return -1;
 
 	/* Ok we can try to search a valid slave device. */
 	/* Note: If it's a diskless DRBD device, there is no slave. */
+	const unsigned int dev_major = major(stats->st_rdev);
 	const unsigned int dev_minor = minor(stats->st_rdev);
 	char slaves_dir[PATH_MAX];
 	snprintf(slaves_dir, sizeof slaves_dir, "/sys/dev/block/%u:%u/slaves", dev_major, dev_minor);
@@ -2693,9 +2731,9 @@ vhd_open(vhd_context_t *ctx, const char *file, int flags)
 		/* If a DRBD path is used, we try to use the real physical device. */
 		/* Why? Because the device can be locked by any program. */
 		/* Note: We can't use the physical data if the DRBD is a diskless device... */
-		/* Logic but annoying. */
+		/* Logic but annoying. Same idea: if the disk is not up to date we can't use it. */
 		dev_t mapper_dev;
-		if (drbd_to_mapper(&stats, &mapper_dev) == 0) {
+		if (drbd_is_up_to_date(&stats) && drbd_to_mapper(&stats, &mapper_dev) == 0) {
 			if (snprintf(bypass_file, sizeof bypass_file, "/dev/block/%u:%u", major(mapper_dev), minor(mapper_dev)) == -1)
 				return -errno;
 		}
-- 
2.25.1

