From d34f013aa078fcc9e5df0105dc5d744fc61fd835 Mon Sep 17 00:00:00 2001
From: Tim Smith <tim.smith@cloud.com>
Date: Mon, 9 Sep 2024 10:49:14 +0100
Subject: [PATCH 13/30] CP-50955 Add a new-style NBD server for each VDI

These start at the same time as the existing old-style ones and use a
different unix-domain socket.

Signed-off-by: Tim Smith <tim.smith@cloud.com>
---
 drivers/tapdisk-control.c   | 11 ++++++---
 drivers/tapdisk-metrics.c   | 18 +++++++++++---
 drivers/tapdisk-metrics.h   |  6 +++--
 drivers/tapdisk-nbdserver.c | 48 ++++++++++++++++++++++++-------------
 drivers/tapdisk-nbdserver.h | 14 ++++++++---
 drivers/tapdisk-vbd.c       | 23 ++++++++++++++----
 drivers/tapdisk-vbd.h       |  3 ++-
 7 files changed, 91 insertions(+), 32 deletions(-)

diff --git a/drivers/tapdisk-control.c b/drivers/tapdisk-control.c
index fc379937..c8b9d826 100644
--- a/drivers/tapdisk-control.c
+++ b/drivers/tapdisk-control.c
@@ -839,7 +839,7 @@ tapdisk_control_open_image(struct tapdisk_ctl_conn *conn,
 	 * For now, let's do this automatically on all 'open' calls. In the
 	 * future, we'll probably want a separate call to start the NBD server
 	 */
-	err = tapdisk_vbd_start_nbdserver(vbd);
+	err = tapdisk_vbd_start_nbdservers(vbd);
 	if (err) {
 		EPRINTF("failed to start NBD server: %d\n", err);
 		goto fail_close;
@@ -892,9 +892,10 @@ tapdisk_control_close_image(struct tapdisk_ctl_conn *conn,
 	if (!list_empty(&vbd->failed_requests))
 		EPRINTF("closing VBD %d with failed requests\n", request->cookie);
 
-	if (vbd->nbdserver) {
+	if (vbd->nbdserver)
 		tapdisk_nbdserver_pause(vbd->nbdserver, true);
-	}
+	if (vbd->nbdserver_new)
+		tapdisk_nbdserver_pause(vbd->nbdserver_new, true);
 
     err = 0;
     list_for_each_entry_safe(blkif, _blkif, &vbd->rings, entry) {
@@ -960,6 +961,10 @@ tapdisk_control_close_image(struct tapdisk_ctl_conn *conn,
 		tapdisk_nbdserver_free(vbd->nbdserver);
 		vbd->nbdserver = NULL;
 	}
+	if (vbd->nbdserver_new) {
+		tapdisk_nbdserver_free(vbd->nbdserver_new);
+		vbd->nbdserver_new = NULL;
+	}
 
 	tapdisk_vbd_close_vdi(vbd);
 
diff --git a/drivers/tapdisk-metrics.c b/drivers/tapdisk-metrics.c
index eba075eb..48000f6a 100644
--- a/drivers/tapdisk-metrics.c
+++ b/drivers/tapdisk-metrics.c
@@ -314,8 +314,8 @@ end:
 
 }
 
-int
-td_metrics_nbd_start(stats_t *nbd_stats, int minor)
+static int
+td_metrics_nbd_start(stats_t *nbd_stats, int minor, const char *pathf)
 {
     int err = 0;
 
@@ -324,7 +324,7 @@ td_metrics_nbd_start(stats_t *nbd_stats, int minor)
 
     shm_init(&nbd_stats->shm);
 
-    err = asprintf(&nbd_stats->shm.path, TAPDISK_METRICS_NBD_PATHF, td_metrics.path, minor);
+    err = asprintf(&nbd_stats->shm.path, pathf, td_metrics.path, minor);
     if(unlikely(err == -1)){
         err = errno;
         EPRINTF("failed to allocate memory to store NBD metrics path: %s\n",strerror(err));
@@ -345,6 +345,18 @@ out:
     return err;
 }
 
+int
+td_metrics_nbd_start_old(stats_t *nbd_stats, int minor)
+{
+    return td_metrics_nbd_start(nbd_stats, minor, TAPDISK_METRICS_NBD_PATHF_OLD);
+}
+
+int
+td_metrics_nbd_start_new(stats_t *nbd_stats, int minor)
+{
+    return td_metrics_nbd_start(nbd_stats, minor, TAPDISK_METRICS_NBD_PATHF_NEW);
+}
+
 int
 td_metrics_nbd_stop(stats_t *nbd_stats)
 {
diff --git a/drivers/tapdisk-metrics.h b/drivers/tapdisk-metrics.h
index c3c99f68..81894b42 100644
--- a/drivers/tapdisk-metrics.h
+++ b/drivers/tapdisk-metrics.h
@@ -35,7 +35,8 @@
 #define TAPDISK_METRICS_VDI_PATHF    "%s/vdi-%hu"
 #define TAPDISK_METRICS_VBD_PATHF    "%s/vbd-%d-%d"
 #define TAPDISK_METRICS_BLKTAP_PATHF "%s/blktap-%d"
-#define TAPDISK_METRICS_NBD_PATHF "%s/nbd-%d"
+#define TAPDISK_METRICS_NBD_PATHF_OLD "%s/nbd-%d"
+#define TAPDISK_METRICS_NBD_PATHF_NEW "%s/nbd-new-%d"
 
 #include <libaio.h>
 
@@ -75,7 +76,8 @@ int td_metrics_blktap_start(int minor, stats_t *blktap_stats);
 /* Destroys the metrics file between tapdisk and blktap */
 int td_metrics_blktap_stop(stats_t *blktap_stats);
 
-int td_metrics_nbd_start(stats_t *nbd_server, int minor);
+int td_metrics_nbd_start_old(stats_t *nbd_server, int minor);
+int td_metrics_nbd_start_new(stats_t *nbd_server, int minor);
 
 int td_metrics_nbd_stop(stats_t *nbd_server);
 #endif /* TAPDISK_METRICS_H */
diff --git a/drivers/tapdisk-nbdserver.c b/drivers/tapdisk-nbdserver.c
index dca1b3a0..92eab5f2 100644
--- a/drivers/tapdisk-nbdserver.c
+++ b/drivers/tapdisk-nbdserver.c
@@ -70,7 +70,6 @@
 #define MAX_REQUEST_SIZE (64 * MEGABYTES)
 
 uint16_t gflags = (NBD_FLAG_FIXED_NEWSTYLE | NBD_FLAG_NO_ZEROES);
-static const int SERVER_USE_OLD_PROTOCOL = 1;
 
 /*
  * Server
@@ -1038,9 +1037,8 @@ tapdisk_nbdserver_handshake_cb(event_id_t id, char mode, void *data)
 	bool no_zeroes = (NBD_FLAG_NO_ZEROES & cflags) != 0;
 
         /* Receive newstyle options. */
-        if (receive_newstyle_options (client, server->handshake_fd, no_zeroes) == -1){
-		ERR("Option negotiation messed up");
-	}
+        if (receive_newstyle_options (client, server->handshake_fd, no_zeroes) == -1)
+			INFO("Option negotiation terminated");
 
 	tapdisk_server_unregister_event(id);
 }
@@ -1163,12 +1161,15 @@ tapdisk_nbdserver_newclient_fd_new_fixed(td_nbdserver_t *server, int new_fd)
 static void
 tapdisk_nbdserver_newclient_fd(td_nbdserver_t *server, int new_fd)
 {
-	if(SERVER_USE_OLD_PROTOCOL){
-		tapdisk_nbdserver_newclient_fd_old(server, new_fd);
-	} else {
-		tapdisk_nbdserver_newclient_fd_new_fixed(server, new_fd);
-	}
-}	
+	switch (server->style) {
+		case TAPDISK_NBD_PROTOCOL_OLD:
+			tapdisk_nbdserver_newclient_fd_old(server, new_fd);
+			break;
+		case TAPDISK_NBD_PROTOCOL_NEW:
+			tapdisk_nbdserver_newclient_fd_new_fixed(server, new_fd);
+			break;
+	};
+}
 
 static td_vbd_request_t *create_request_vreq(
 	td_nbdserver_client_t *client, struct nbd_request request, uint32_t len)
@@ -1404,7 +1405,7 @@ tapdisk_nbdserver_newclient_unix(event_id_t id, char mode, void *data)
 }
 
 td_nbdserver_t *
-tapdisk_nbdserver_alloc(td_vbd_t *vbd, td_disk_info_t info)
+tapdisk_nbdserver_alloc(td_vbd_t *vbd, td_disk_info_t info, nbd_protocol_style_t style)
 {
 	td_nbdserver_t *server;
 	char fdreceiver_path[TAPDISK_NBDSERVER_MAX_PATH_LEN];
@@ -1422,15 +1423,28 @@ tapdisk_nbdserver_alloc(td_vbd_t *vbd, td_disk_info_t info)
 	server->fdrecv_listening_event_id = -1;
 	server->unix_listening_fd = -1;
 	server->unix_listening_event_id = -1;
+	server->style = style;
 	INIT_LIST_HEAD(&server->clients);
 
-	if (td_metrics_nbd_start(&server->nbd_stats, server->vbd->tap->minor)) {
-		ERR("failed to create metrics file for nbdserver");
-		goto fail;
+	switch (style) {
+		case TAPDISK_NBD_PROTOCOL_OLD:
+			if (td_metrics_nbd_start_old(&server->nbd_stats, server->vbd->tap->minor)) {
+				ERR("failed to create metrics file for nbdserver");
+				goto fail;
+			}
+			break;
+		case TAPDISK_NBD_PROTOCOL_NEW:
+			if (td_metrics_nbd_start_new(&server->nbd_stats, server->vbd->tap->minor)) {
+				ERR("failed to create metrics file for nbdserver");
+				goto fail;
+			}
+			break;
 	}
 
 	if (snprintf(fdreceiver_path, TAPDISK_NBDSERVER_MAX_PATH_LEN,
-			"%s%d.%d", TAPDISK_NBDSERVER_LISTEN_SOCK_PATH, getpid(),
+			"%s%d.%d",
+			(style == TAPDISK_NBD_PROTOCOL_OLD)?TAPDISK_NBDSERVER_OLD_LISTEN_SOCK_PATH:TAPDISK_NBDSERVER_NEW_LISTEN_SOCK_PATH,
+			getpid(),
 			vbd->uuid) < 0) {
 		ERR("Failed to snprintf fdreceiver_path");
 		goto fail;
@@ -1444,7 +1458,9 @@ tapdisk_nbdserver_alloc(td_vbd_t *vbd, td_disk_info_t info)
 	}
 
 	if (snprintf(server->sockpath, TAPDISK_NBDSERVER_MAX_PATH_LEN,
-			"%s%d.%d", TAPDISK_NBDSERVER_SOCK_PATH, getpid(),
+			"%s%d.%d",
+			(style == TAPDISK_NBD_PROTOCOL_OLD)?TAPDISK_NBDSERVER_OLD_SOCK_PATH:TAPDISK_NBDSERVER_NEW_SOCK_PATH,
+			getpid(),
 			vbd->uuid) < 0) {
 		ERR("Failed to snprintf sockpath");
 		goto fail;
diff --git a/drivers/tapdisk-nbdserver.h b/drivers/tapdisk-nbdserver.h
index e0fde58a..24077503 100644
--- a/drivers/tapdisk-nbdserver.h
+++ b/drivers/tapdisk-nbdserver.h
@@ -56,6 +56,11 @@ enum {
 	TAPDISK_NBD_CMD_BLOCK_STATUS
 };
 
+typedef enum nbd_protocol_style {
+	TAPDISK_NBD_PROTOCOL_OLD = 0,
+	TAPDISK_NBD_PROTOCOL_NEW
+} nbd_protocol_style_t;
+
 struct nbd_request {
 	uint32_t magic;
 	uint32_t type;	
@@ -73,8 +78,10 @@ struct nbd_reply {
 
 #define TAPDISK_NBDSERVER_MAX_PATH_LEN 256
 #define TAPDISK_NBDCLIENT_LISTEN_SOCK_PATH BLKTAP2_CONTROL_DIR"/nbdclient"
-#define TAPDISK_NBDSERVER_LISTEN_SOCK_PATH BLKTAP2_CONTROL_DIR"/nbdserver"
-#define TAPDISK_NBDSERVER_SOCK_PATH BLKTAP2_CONTROL_DIR"/nbd"
+#define TAPDISK_NBDSERVER_OLD_LISTEN_SOCK_PATH BLKTAP2_CONTROL_DIR"/nbdserver"
+#define TAPDISK_NBDSERVER_NEW_LISTEN_SOCK_PATH BLKTAP2_CONTROL_DIR"/nbdserver-new"
+#define TAPDISK_NBDSERVER_OLD_SOCK_PATH BLKTAP2_CONTROL_DIR"/nbd"
+#define TAPDISK_NBDSERVER_NEW_SOCK_PATH BLKTAP2_CONTROL_DIR"/nbd-new"
 
 struct td_nbdserver {
 	td_vbd_t               *vbd;
@@ -121,6 +128,7 @@ struct td_nbdserver {
 
 	stats_t                 nbd_stats;
 
+	nbd_protocol_style_t	style;
 };
 
 struct td_nbdserver_client {
@@ -148,7 +156,7 @@ struct td_nbdserver_client {
 	int                     max_used_reqs;
 };
 
-td_nbdserver_t *tapdisk_nbdserver_alloc(td_vbd_t *, td_disk_info_t);
+td_nbdserver_t *tapdisk_nbdserver_alloc(td_vbd_t *, td_disk_info_t, nbd_protocol_style_t);
 
 /**
  * Listen for connections on a TCP socket at the specified port.
diff --git a/drivers/tapdisk-vbd.c b/drivers/tapdisk-vbd.c
index 412cb206..8e82a3fc 100644
--- a/drivers/tapdisk-vbd.c
+++ b/drivers/tapdisk-vbd.c
@@ -951,6 +951,8 @@ tapdisk_vbd_pause(td_vbd_t *vbd)
 
 	if (vbd->nbdserver)
 		tapdisk_nbdserver_pause(vbd->nbdserver, log);
+	if (vbd->nbdserver_new)
+		tapdisk_nbdserver_pause(vbd->nbdserver_new, log);
 
 	list_for_each_entry(blkif, &vbd->rings, entry)
 		tapdisk_xenblkif_suspend(blkif);
@@ -1028,6 +1030,8 @@ resume_failed:
 
 	if (vbd->nbdserver)
 		tapdisk_nbdserver_unpause(vbd->nbdserver);
+	if (vbd->nbdserver_new)
+		tapdisk_nbdserver_unpause(vbd->nbdserver_new);
 
     list_for_each_entry(blkif, &vbd->rings, entry)
 		tapdisk_xenblkif_resume(blkif);
@@ -1801,7 +1805,7 @@ tapdisk_vbd_kick(td_vbd_t *vbd)
 }
 
 int
-tapdisk_vbd_start_nbdserver(td_vbd_t *vbd)
+tapdisk_vbd_start_nbdservers(td_vbd_t *vbd)
 {
 	td_disk_info_t info;
 	int err;
@@ -1811,13 +1815,11 @@ tapdisk_vbd_start_nbdserver(td_vbd_t *vbd)
 	if (err)
 		return err;
 
-	vbd->nbdserver = tapdisk_nbdserver_alloc(vbd, info);
-
+	vbd->nbdserver = tapdisk_nbdserver_alloc(vbd, info, TAPDISK_NBD_PROTOCOL_OLD);
 	if (!vbd->nbdserver) {
 		EPRINTF("Error starting nbd server");
 		return -1;
 	}
-
 	err = tapdisk_nbdserver_listen_unix(vbd->nbdserver);
 	if (err) {
 		tapdisk_nbdserver_free(vbd->nbdserver);
@@ -1826,6 +1828,19 @@ tapdisk_vbd_start_nbdserver(td_vbd_t *vbd)
 		return err;
 	}
 
+	vbd->nbdserver_new = tapdisk_nbdserver_alloc(vbd, info, TAPDISK_NBD_PROTOCOL_NEW);
+	if (!vbd->nbdserver_new) {
+		EPRINTF("Error starting new-style nbd server");
+		return -1;
+	}
+	err = tapdisk_nbdserver_listen_unix(vbd->nbdserver_new);
+	if (err) {
+		tapdisk_nbdserver_free(vbd->nbdserver_new);
+		EPRINTF("failed to listen on the UNIX domain socket: %s\n",
+				strerror(-err));
+		return err;
+	}
+
 	return 0;
 }
 
diff --git a/drivers/tapdisk-vbd.h b/drivers/tapdisk-vbd.h
index e846dac8..f877b51a 100644
--- a/drivers/tapdisk-vbd.h
+++ b/drivers/tapdisk-vbd.h
@@ -151,6 +151,7 @@ struct td_vbd_handle {
 	td_sector_count_t           secs;
 
 	struct td_nbdserver        *nbdserver;
+	struct td_nbdserver        *nbdserver_new;
 
 	/**
 	 * We keep a copy of the disk info because we might receive a disk info
@@ -240,7 +241,7 @@ int tapdisk_vbd_recheck_state(td_vbd_t *);
 
 void tapdisk_vbd_check_progress(td_vbd_t *);
 void tapdisk_vbd_debug(td_vbd_t *);
-int tapdisk_vbd_start_nbdserver(td_vbd_t *);
+int tapdisk_vbd_start_nbdservers(td_vbd_t *);
 void tapdisk_vbd_stats(td_vbd_t *, td_stats_t *);
 void tapdisk_vbd_complete_block_status_request(td_request_t, int);
 
