From a62cfdf800ed1f00d7584c65bc69f63993ee9c21 Mon Sep 17 00:00:00 2001
From: Anthoine Bourgeois <anthoine.bourgeois@vates.tech>
Date: Mon, 10 Feb 2025 16:45:05 +0100
Subject: [PATCH] tapdisk: support new commit command

This command will coalesce the disk in parameter with its parent.
tap-ctl commit -m 0 -p 12345 -a /path/to/disk.qcow2

Signed-off-by: Anthoine Bourgeois <anthoine.bourgeois@vates.tech>
---
 control/Makefile.am         |  1 +
 control/tap-ctl-commit.c    | 77 +++++++++++++++++++++++++++++++++++++
 control/tap-ctl.c           | 47 ++++++++++++++++++++++
 drivers/tapdisk-control.c   | 36 +++++++++++++++++
 drivers/tapdisk-interface.c | 25 ++++++++++++
 drivers/tapdisk-interface.h |  1 +
 drivers/tapdisk-vbd.c       | 16 ++++++++
 drivers/tapdisk-vbd.h       |  1 +
 drivers/tapdisk.h           |  1 +
 include/tap-ctl.h           |  5 +++
 include/tapdisk-message.h   |  8 ++++
 11 files changed, 218 insertions(+)
 create mode 100644 control/tap-ctl-commit.c

diff --git a/control/Makefile.am b/control/Makefile.am
index 6ca88ab7..5f954c92 100644
--- a/control/Makefile.am
+++ b/control/Makefile.am
@@ -33,6 +33,7 @@ libblktapctl_la_SOURCES += tap-ctl-check.c
 libblktapctl_la_SOURCES += tap-ctl-stats.c
 libblktapctl_la_SOURCES += tap-ctl-xen.c
 libblktapctl_la_SOURCES += tap-ctl-info.c
+libblktapctl_la_SOURCES += tap-ctl-commit.c
 
 libblktapctl_la_LDFLAGS = -version-info 1:1:1
 
diff --git a/control/tap-ctl-commit.c b/control/tap-ctl-commit.c
new file mode 100644
index 00000000..1edf57c9
--- /dev/null
+++ b/control/tap-ctl-commit.c
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) 2016, Citrix Systems, Inc.
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ * 
+ *  1. Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *  2. Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *  3. Neither the name of the copyright holder nor the names of its 
+ *     contributors may be used to endorse or promote products derived from 
+ *     this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <stdio.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <getopt.h>
+
+#include "tap-ctl.h"
+#include "util.h"
+
+int
+tap_ctl_commit(const int id, const int minor, const char *params)
+{
+	int err;
+	tapdisk_message_t message;
+
+	memset(&message, 0, sizeof(message));
+	message.type = TAPDISK_MESSAGE_COMMIT;
+	message.cookie = minor;
+
+	if (params)
+		safe_strncpy(message.u.params.path, params,
+			     sizeof(message.u.params.path));
+
+        err = tap_ctl_connect_send_and_receive(id, &message, NULL);
+
+	if (err)
+		return err;
+
+	if (message.type == TAPDISK_MESSAGE_COMMIT_RSP
+			|| message.type == TAPDISK_MESSAGE_ERROR)
+		err = -message.u.response.error;
+	else {
+		EPRINTF("got unexpected result '%s' from %d\n",
+				tapdisk_message_name(message.type), id);
+		err = -EINVAL;
+	}
+
+	if (err)
+		EPRINTF("commit failed: %s\n", strerror(-err));
+
+	return err;
+}
diff --git a/control/tap-ctl.c b/control/tap-ctl.c
index 64d96d0d..958431da 100644
--- a/control/tap-ctl.c
+++ b/control/tap-ctl.c
@@ -943,6 +943,52 @@ usage:
 	return EINVAL;
 }
 
+static void
+tap_cli_commit_usage(FILE *stream)
+{
+	fprintf(stream, "usage: commit <-p pid> <-m minor> -a /path/to/file\n");
+}
+
+int
+tap_cli_commit(int argc, char **argv)
+{
+	const char *args;
+	int c, pid, minor;
+
+	pid        = -1;
+	minor = -1;
+	args  = NULL;
+
+	optind = 0;
+	while ((c = getopt(argc, argv, "p:m:a:2:c:h")) != -1) {
+		switch (c) {
+		case 'p':
+			pid = atoi(optarg);
+			break;
+		case 'm':
+			minor = atoi(optarg);
+			break;
+		case 'a':
+			args = optarg;
+			break;
+		case '?':
+			goto usage;
+		case 'h':
+			tap_cli_commit_usage(stdout);
+			return 0;
+		}
+	}
+
+	if (pid == -1 || minor == -1 || args == NULL)
+		goto usage;
+
+	return tap_ctl_commit(pid, minor, args);
+
+usage:
+	tap_cli_commit_usage(stderr);
+	return EINVAL;
+}
+
 struct command commands[] = {
 	{ .name = "list",         .func = tap_cli_list          },
 	{ .name = "allocate",     .func = tap_cli_allocate      },
@@ -959,6 +1005,7 @@ struct command commands[] = {
 	{ .name = "stats",        .func = tap_cli_stats         },
 	{ .name = "major",        .func = tap_cli_major         },
 	{ .name = "check",        .func = tap_cli_check         },
+	{ .name = "commit",       .func = tap_cli_commit        },
 };
 
 #define print_commands()					\
diff --git a/drivers/tapdisk-control.c b/drivers/tapdisk-control.c
index 91ffe097..ece3a077 100644
--- a/drivers/tapdisk-control.c
+++ b/drivers/tapdisk-control.c
@@ -1307,6 +1307,38 @@ out:
     return err;
 }
 
+static int
+tapdisk_control_commit(struct tapdisk_ctl_conn *conn,
+		       tapdisk_message_t *request, tapdisk_message_t * const response)
+{
+	int err;
+	td_vbd_t *vbd;
+	const char *desc = NULL;
+
+	ASSERT(conn);
+	ASSERT(request);
+	ASSERT(response);
+
+	INFO("commit %d\n", request->cookie);
+
+	vbd = tapdisk_server_get_vbd(request->cookie);
+	if (!vbd) {
+		/* TODO log error */
+		err = -ENODEV;
+		goto out;
+	}
+
+	if (request->u.params.path[0])
+		desc = request->u.params.path;
+
+	err = tapdisk_vbd_commit(vbd, desc);
+out:
+	response->cookie = request->cookie;
+	if (!err)
+		response->type = TAPDISK_MESSAGE_COMMIT_RSP;
+	return err;
+}
+
 
 struct tapdisk_control_info message_infos[] = {
 	[TAPDISK_MESSAGE_PID] = {
@@ -1364,6 +1396,10 @@ struct tapdisk_control_info message_infos[] = {
 	[TAPDISK_MESSAGE_EXIT] = {
 		.handler = NULL,
 		.flags = 0
+	},
+	[TAPDISK_MESSAGE_COMMIT] = {
+		.handler = tapdisk_control_commit,
+		.flags   = TAPDISK_MSG_VERBOSE,
 	}
 };
 
diff --git a/drivers/tapdisk-interface.c b/drivers/tapdisk-interface.c
index facb6d01..7a0d10c8 100644
--- a/drivers/tapdisk-interface.c
+++ b/drivers/tapdisk-interface.c
@@ -267,6 +267,31 @@ fail:
 	td_complete_request(*treq, err);
 }
 
+int
+td_commit(td_image_t *image, const char *name)
+{
+	td_driver_t *driver;
+
+	if (!image) {
+		return -ENODEV;
+	}
+
+	driver = image->driver;
+	if (!driver) {
+		return -ENODEV;
+	}
+
+	if (!td_flag_test(driver->state, TD_DRIVER_OPEN)) {
+		return -EBADF;
+	}
+
+	if (!driver->ops->td_commit) {
+		return -EOPNOTSUPP;
+	}
+
+	return driver->ops->td_commit(driver, name);
+}
+
 void
 td_forward_request(td_request_t treq)
 {
diff --git a/drivers/tapdisk-interface.h b/drivers/tapdisk-interface.h
index 437feb58..076528ea 100644
--- a/drivers/tapdisk-interface.h
+++ b/drivers/tapdisk-interface.h
@@ -42,6 +42,7 @@ int td_load(td_image_t *);
 int td_close(td_image_t *);
 int td_get_parent_id(td_image_t *, td_disk_id_t *);
 int td_validate_parent(td_image_t *, td_image_t *);
+int td_commit(td_image_t *, const char *);
 
 void td_queue_write(td_image_t *, td_request_t);
 void td_queue_read(td_image_t *, td_request_t);
diff --git a/drivers/tapdisk-vbd.c b/drivers/tapdisk-vbd.c
index 3859225f..4fda1c26 100644
--- a/drivers/tapdisk-vbd.c
+++ b/drivers/tapdisk-vbd.c
@@ -1077,6 +1077,22 @@ resume_failed:
 	return 0;
 }
 
+int
+tapdisk_vbd_commit(td_vbd_t *vbd, const char *name)
+{
+	int err;
+
+	if (log) {
+		INFO("commit %s\n", name);
+	}
+
+	err = td_commit(tapdisk_vbd_first_image(vbd), name);
+
+	INFO("commit started (%d)\n", err);
+
+	return err;
+}
+
 static int
 tapdisk_vbd_request_ttl(td_vbd_request_t *vreq,
 			const struct timeval *now)
diff --git a/drivers/tapdisk-vbd.h b/drivers/tapdisk-vbd.h
index 3c09dc1b..6a49a9af 100644
--- a/drivers/tapdisk-vbd.h
+++ b/drivers/tapdisk-vbd.h
@@ -228,6 +228,7 @@ int tapdisk_vbd_resume(td_vbd_t *, const char *);
 void tapdisk_vbd_kick(td_vbd_t *);
 void tapdisk_vbd_check_state(td_vbd_t *);
 void tapdisk_vbd_free(td_vbd_t *);
+int tapdisk_vbd_commit(td_vbd_t *, const char *);
 
 void tapdisk_vbd_complete_td_request(td_request_t, int);
 int add_extent(tapdisk_extents_t *, td_request_t *);
diff --git a/drivers/tapdisk.h b/drivers/tapdisk.h
index 3163e190..8bc16546 100644
--- a/drivers/tapdisk.h
+++ b/drivers/tapdisk.h
@@ -226,6 +226,7 @@ struct tap_disk {
 	void (*td_queue_write)       (td_driver_t *, td_request_t);
 	void (*td_debug)             (td_driver_t *);
 	void (*td_stats)             (td_driver_t *, td_stats_t *);
+	int (*td_commit)             (td_driver_t *, const char *);
 
     /**
      * Callback to produce RRD output.
diff --git a/include/tap-ctl.h b/include/tap-ctl.h
index adf75695..1c403d8b 100644
--- a/include/tap-ctl.h
+++ b/include/tap-ctl.h
@@ -143,6 +143,11 @@ int tap_ctl_stats_fwrite(pid_t pid, int minor, FILE *out);
 
 int tap_ctl_blk_major(void);
 
+/**
+ * Commit a VBD.
+ */
+int tap_ctl_commit(const int id, const int minor, const char *params);
+
 /**
  * Instructs a tapdisk to connect to the shared ring.
  *
diff --git a/include/tapdisk-message.h b/include/tapdisk-message.h
index 0f73e0c9..664e2e54 100644
--- a/include/tapdisk-message.h
+++ b/include/tapdisk-message.h
@@ -233,6 +233,8 @@ enum tapdisk_message_id {
 	TAPDISK_MESSAGE_DISK_INFO,
 	TAPDISK_MESSAGE_DISK_INFO_RSP,
 	TAPDISK_MESSAGE_EXIT,
+	TAPDISK_MESSAGE_COMMIT,
+	TAPDISK_MESSAGE_COMMIT_RSP,
 	TAPDISK_MESSAGE_MAX /* This value must be the last. */
 };
 
@@ -327,6 +329,12 @@ tapdisk_message_name(enum tapdisk_message_id id)
 	case TAPDISK_MESSAGE_EXIT:
 		return "exit";
 
+	case TAPDISK_MESSAGE_COMMIT:
+		return "commit";
+
+	case TAPDISK_MESSAGE_COMMIT_RSP:
+		return "commit response";
+
 	default:
 		return "unknown";
 	}
